generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model Users {
  userId        String          @id @default(uuid())
  username      String          @unique
  email         String          @unique
  password      String?
  otp           String?
  googleId      String?
  role          Roles           @default(USER)
  isVerified    Boolean         @default(false)
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  address       Address[]
  carts         Carts[]
  notifications Notifications[]
  profiles      Profiles?
  ratings       Ratings[]
  transactions  Transactions[]
}

model Profiles {
  profileId    String   @id @default(uuid())
  userId       String   @unique
  fullName     String?
  phoneNumber  String?
  gender       String?
  imageProfile String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  users        Users    @relation(fields: [userId], references: [userId])
}

model Address {
  addressId    String         @id @default(uuid())
  userId       String
  nameAddress  String?
  address      String?
  city         String?
  country      String?
  postalCode   String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  users        Users          @relation(fields: [userId], references: [userId])
  transactions Transactions[]
}

model Categories {
  categoryId String     @id @default(uuid())
  name       String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  products   Products[]
}

model Products {
  productId   String        @id @default(uuid())
  name        String
  categoryId  String
  price       Int
  promoPrice  Int?
  weight      Int?
  stock       Int
  description String
  image       String?
  isDeleted   Boolean       @default(false)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  carts       Carts[]
  manageStock ManageStock[]
  category    Categories    @relation(fields: [categoryId], references: [categoryId])
  ratings     Ratings[]
}

model Suppliers {
  supplierId  String        @id @default(uuid())
  name        String
  email       String?
  address     String?
  phoneNumber String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  manageStock ManageStock[]
}

model ManageStock {
  manageStockId String    @id @default(uuid())
  supplierId    String
  productId     String
  stockIn       Int?
  dateStockIn   DateTime
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  product       Products  @relation(fields: [productId], references: [productId])
  supplier      Suppliers @relation(fields: [supplierId], references: [supplierId])
}

model Carts {
  cartId      String         @id @default(uuid())
  userId      String
  productId   String
  qty         Int
  isCheckout  Boolean        @default(false)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  products    Products       @relation(fields: [productId], references: [productId])
  users       Users          @relation(fields: [userId], references: [userId])
  transactions Transactions[] @relation("TransactionCarts")
}

model Promo {
  promoId      String         @id @default(uuid())
  discount     Int
  activeAt     DateTime
  expiresAt    DateTime
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  codePromo    String
  transactions Transactions[]
}

model Transactions {
  transactionId    String    @id @default(uuid())
  userId           String
  cartIds          String[]
  promoId          String?
  addressId        String
  discount         Int?       @default(0)
  ongkirValue      Int?       @default(0)
  total            Int
  status_payment   String
  payment_type     String?
  transaction_time DateTime?
  courier          String?
  receiptDelivery  String?
  shippingStatus   String    @default("Pending")
  paymentUrl       String?
  token            String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
  address          Address   @relation(fields: [addressId], references: [addressId])
  carts            Carts[]   @relation("TransactionCarts")
  promo            Promo?    @relation(fields: [promoId], references: [promoId])
  users            Users     @relation(fields: [userId], references: [userId])
}

model Ratings {
  ratingId  String   @id @default(uuid())
  userId    String
  productId String
  rating    Int
  image     String?
  review    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  products  Products @relation(fields: [productId], references: [productId])
  users     Users    @relation(fields: [userId], references: [userId])
}

model Notifications {
  notificationId String   @id @default(uuid())
  userId         String
  title          String
  body           String
  description    String?
  isRead         Boolean  @default(false)
  isDeleted      Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  users          Users    @relation(fields: [userId], references: [userId])
}

enum Roles {
  ADMIN
  USER
}
